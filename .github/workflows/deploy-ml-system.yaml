import os

# Define directory structure
folders = [
    "src", 
    "k8s", 
    "tests"
]

# Define file contents
file_contents = {
    "requirements.txt": """
numpy==1.23.5
pandas==1.5.3
scikit-learn==1.2.2
lightgbm==3.3.2
optuna==3.0.3
Flask==2.2.2
pytest==7.2.0
""",
    ".github/workflows/deploy-ml-system.yaml": """
name: Deploy ML System to Kubernetes

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: Get Kubernetes Pods and Services
        run: |
          kubectl get pods
          kubectl get services

      - name: Bundle ML Monitoring System
        run: |
          mkdir ml_monitoring_system
          cp -r src config tests docs examples ml_monitoring_system/
          zip -r ml_monitoring_system.zip ml_monitoring_system

      - name: Verify Integrity
        run: |
          unzip -t ml_monitoring_system.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ml-monitoring-system
          path: ml_monitoring_system.zip
""",
    "src/main.py": """
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

def train_model(data):
    X = data.drop('target', axis=1)
    y = data['target']
    
    model = RandomForestClassifier()
    model.fit(X, y)
    return model

def main():
    data = pd.read_csv('path/to/data.csv')
    model = train_model(data)
    print("Model training complete.")

if __name__ == "__main__":
    main()
""",
    "k8s/deployment.yaml": """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-system-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ml-system
  template:
    metadata:
      labels:
        app: ml-system
    spec:
      containers:
      - name: ml-system
        image: your-docker-image:latest
        ports:
        - containerPort: 80
""",
    "k8s/service.yaml": """
apiVersion: v1
kind: Service
metadata:
  name: ml-system-service
spec:
  selector:
    app: ml-system
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
""",
    "tests/test_main.py": """
import pytest
import pandas as pd
from src.main import train_model

def test_train_model():
    data = pd.DataFrame({
        'feature1': [1, 2, 3, 4],
        'feature2': [10, 20, 30, 40],
        'target': [0, 1, 0, 1]
    })
    model = train_model(data)
    assert model is not None
    assert hasattr(model, 'predict')
"""
}

# Create directories
for folder in folders:
    os.makedirs(folder, exist_ok=True)

# Create files and add content
for file, content in file_contents.items():
    directory = os.path.dirname(file)
    if directory and not os.path.exists(directory):
        os.makedirs(directory)
    with open(file, 'w') as f:
        f.write(content)

print("Directories and files created successfully!")